// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SwipeCSAT.Api;

#nullable disable

namespace SwipeCSAT.Api.Migrations
{
    [DbContext(typeof(SwipeCsatDbContext))]
    [Migration("20250315131649_DeleteKeys")]
    partial class DeleteKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryEntityCriterionEntity", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CriterionsId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "CriterionsId");

                    b.HasIndex("CriterionsId");

                    b.ToTable("CategoryEntityCriterionEntity");
                });

            modelBuilder.Entity("CriterionEntityProductEntity", b =>
                {
                    b.Property<Guid>("CriterionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("CriterionsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CriterionEntityProductEntity");
                });

            modelBuilder.Entity("SwipeCSAT.Api.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SwipeCSAT.Api.Entities.CriterionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Criterions");
                });

            modelBuilder.Entity("SwipeCSAT.Api.Entities.CriterionRatingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CriterionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CriterionId");

                    b.HasIndex("ProductId");

                    b.ToTable("CriterionRatings");
                });

            modelBuilder.Entity("SwipeCSAT.Api.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CategoryEntityCriterionEntity", b =>
                {
                    b.HasOne("SwipeCSAT.Api.Entities.CategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwipeCSAT.Api.Entities.CriterionEntity", null)
                        .WithMany()
                        .HasForeignKey("CriterionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CriterionEntityProductEntity", b =>
                {
                    b.HasOne("SwipeCSAT.Api.Entities.CriterionEntity", null)
                        .WithMany()
                        .HasForeignKey("CriterionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwipeCSAT.Api.Entities.ProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SwipeCSAT.Api.Entities.CriterionRatingEntity", b =>
                {
                    b.HasOne("SwipeCSAT.Api.Entities.CriterionEntity", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId");

                    b.HasOne("SwipeCSAT.Api.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Criterion");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SwipeCSAT.Api.Entities.ProductEntity", b =>
                {
                    b.HasOne("SwipeCSAT.Api.Entities.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SwipeCSAT.Api.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
